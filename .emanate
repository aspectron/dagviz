"use strict";

const E = new Emanator(__dirname, {
    type : 'NODE',
    guid : '41072047-6d92-44d8-92a5-d9b16c79bd01',
    group : 'DAGlabs',
    ident : 'dagviz',
    title : 'DAGViz',
    banner : 'DAGVIZ',
    git : 'git@github.com:kaspanet/dagviz',
    nonpm : false,
    author : "DAGlabs",
    url : "http://daglabs.com",
    archive : true,
    folder : true,
    standalone : true,
});



E.task('files', ['origin'], async (callback) => {

    let files = E.manifest.files.map((f) => {
        return E.copy(path.join(E.REPO,f),path.join(E.BUILD,f));
    })
    E.log(`copying ${files.length} items...`);
    await Promise.all(files);
    E.log(`done...`);
})

E.task('done', ['files'], async () => {
})

E.task('docker',null, async () => {

    E.manifest_read();

    await E.remove(path.join(__dirname,'k-explorer'));
    await E.copy(path.join(__dirname,'..','kexplorer'), path.join(__dirname,'k-explorer'));
    await E.remove(path.join(__dirname,'k-explorer','node_modules'));

    const relay = ['no-cache'];
    const args = ['-s','docker','build'].concat(relay.map(k=>E.flags[k]?`--${k}`:null)).filter(v=>v);
    args.push('-t',`dagviz:latest`,'.');
    const ts0 = Date.now();
    await E.utils.spawn('sudo', args, { cwd : __dirname, stdio: 'inherit' });
    await E.utils.spawn('sudo',['docker','tag','dagviz:latest',`dagviz:${E.manifest.version}`], { cwd : __dirname, stdio: 'inherit' });
    console.log('Docker build complete at',new Date());
    const ts1 = Date.now();
    console.log('Docker build took'.brightBlue,`${((ts1-ts0)/1000/60).toFixed(1)}`.brightWhite,'minutes'.brightBlue)
});


E.task('pgsql', ['origin'], async (callback) => {
    E.BIN = path.join(E.appFolder,'bin',E.PLATFORM_ARCH);
    mkdirp.sync(E.BIN);


    console.log("pgSQL:",E.BIN);
    if(E.PLATFORM == 'linux')
        return Promise.resolve();

    if(E.flags.nodb || E.flags.nosql || E.flags.nopgsql)
        return Promise.resolve();

    const pgsql = {
        windows : { 
            url : 'http://sbp.enterprisedb.com/getfile.jsp?fileid=12454', 
            file : `postgresql-12.2-2-windows-x64-binaries.zip` 
        },
        darwin : { 
            url : 'https://sbp.enterprisedb.com/getfile.jsp?fileid=12475', 
            file : `postgresql-12.2-3-osx-binaries.zip` 
        }
    }[E.PLATFORM];
    // `postgresql-12.2-3-osx-binaries.zip`.match(/^\w+-(\d).(\d)-(\d)/)
    const [, major, minor, release_] = pgsql.file.match(/^\w+-(\d+).(\d+)-(\d+)/);
    const version = `${major}.${minor}.${release_}`;

    E.utils.resetTTY();

    const file = path.join(E.DEPS,pgsql.file);
    const basename = path.basename(pgsql.file).replace(/\.(zip|tar|tar.gz|tar.xz)$/,'');
    const archiveFolder = path.join(E.DEPS, basename);
    if(!fs.existsSync(file) || !fs.existsSync(path.join(archiveFolder,'pgsql'))) {
        await E.download(pgsql.url,file);
        await E.unzip(file, archiveFolder);
    }

    const targetBinFolder = path.join(E.BIN,basename);
    if(fs.existsSync(targetBinFolder)) {
        E.log(`WARNING: previous pgSQL deployment found...`.brightRed,);
        E.log(`         cleaning up existing ${targetBinFolder}...`);
        await fs.remove(targetBinFolder);
    }
    mkdirp.sync(targetBinFolder);

    E.log(`copying ${basename}...`);
    let folders = ['bin','lib','share'];

    // --pgsql-full-distro adds 425 Mb to the final distribution :/
    if(E.flags['pgsql-full-distro'])
        folders.push('pgadmin 4', 'stackbuilder', 'symbols', 'include', 'doc');
    
    const jobs = folders.map((f) => {
        if(E.PLATFORM == 'windows') {
            return E.copy(path.join(archiveFolder,'pgsql',f), path.join(targetBinFolder,f));
        }
        else
            return E.spawn('cp', ['-R',path.join(archiveFolder,'pgsql',f),path.join(targetBinFolder,f)], { cwd : E.DEPS, stdio: 'inherit' });
    })
    await Promise.all(jobs);

    [ 'postgres', 'pg_ctl', 'psql', 'initdb' ].forEach((f) => {
        let name = `KDX pgSQL ${f}`;
        let file = path.join(basename, 'bin', f+E.PLATFORM_BINARY_EXTENSION);
        E.registerFirewallRule({ name, file, binary : true });
    })

    E.log('done...');
})


/*
E.task('mysql', ['origin'], async (callback) => {

    // disabling MySQL for now
    // return Promise.resolve();
    E.BIN = path.join(E.appFolder,'bin',E.PLATFORM_ARCH);
    mkdirp.sync(E.BIN);
    
    // ---

    if(E.PLATFORM == 'linux')
        return Promise.resolve();

    let version = '8.0.18';
    let macos = 'macos10.14';
    const mysql = {
        windows : `mysql-${version}-winx64.zip`,
        linux : `mysql-${version}-linux-x86_64-minimal.tar.xz`,
        darwin : `mysql-${version}-${macos}-x86_64.tar.gz`
    }[E.PLATFORM];

    if(E.flags.nodb || E.flags.nosql || E.flags.nomysql)
        return Promise.resolve();

    E.utils.resetTTY();

    let file = path.join(E.DEPS,mysql);
    await E.download(`https://dev.mysql.com/get/Downloads/MySQL-8.0/${mysql}`,file);
    await E.unzip(file, E.DEPS);//, callback);
    let basename = path.basename(mysql).replace(/\.(zip|tar|tar.gz|tar.xz)$/,'');

    const targetBinFolder = path.join(E.BIN,basename);
    if(fs.existsSync(targetBinFolder)) {
        E.log(`WARNING: previous MySQL deployment found...`.brightRed,);
        E.log(`         cleaning up existing ${targetBinFolder}...`);
        await fs.remove(targetBinFolder);
    }
    mkdirp.sync(targetBinFolder);

    E.log(`copying ${basename}...`);
    let folders = ['bin','lib','share'];

    let jobs = folders.map((f) => {
        if(E.PLATFORM == 'windows')
            return E.copy(path.join(E.DEPS,basename,f), path.join(targetBinFolder,f));
        else
            return E.spawn('cp', ['-r',path.join(E.DEPS,basename,f),path.join(targetBinFolder,f)], { cwd : E.DEPS, stdio: 'inherit' });
    })
    await Promise.all(jobs);
    E.log('done...');

})
*/



// if(E.flags.mysql) {
//     E.run(['mysql']);
// }
// else
if(E.flags['local-binaries'] || E.flags.pgsql) {
    E.run(['pgsql']);
}
else
if(E.flags.docker) {
    E.run(['docker']);
}
else
if(!E.flags['local-binaries'])
    E.run();
